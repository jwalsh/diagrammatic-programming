* Diagrammatic Programming

This repository contains examples and tooling to demonstrate a hermeneutic, collaborative approach to aligning system diagrams and code using LangChain.

** Approach

The hermeneutic circle refers to the idea that we come to understand the meaning of the whole through its parts, while also comprehending the meaning of the parts through the whole. This circular process leads to deeper understanding as we iterate between the parts and the whole. Some key aspects of the hermeneutic circle are:

- It involves a repetitive process of interpretation to gain understanding. There is constant interplay between the parts and the whole.
- Each pass through the circle spirals towards deeper understanding of the meaning. It's an iterative process of correcting misunderstandings and reaching a shared interpretation.
- It requires an openness to having your initial assumptions and understanding challenged and revised. Each loop should update your perspective.
- The end goal is to reach an alignment or "fixed point" between the original text/parts and your interpretation of the meaning/whole. There should be an interpretive consensus.

So in summary, the "hermeneutic circle" captures that back and forth dialogic process of interpreting meaning that you're engaging in with the code and diagrams. The iterative looping leads to greater alignment and shared understanding of the system.

** Methodology

The `Architect` and `Coder` personas iteratively update diagrams and code respectively using LangChain prompts. This builds shared understanding of the system through circular refinement.

** Workflow 

[[./workflow.png]]


- Starting with an initial system diagram
- Converting the diagram to code
- Architect and Coder iteratively updating artifacts
- Validating once a fixed point is reached

* Diagrammatic Programming Examples

** Online Ordering System
- Diagram shows flow from browsing items, adding to cart, checkout, payment, order confirmation
- Code implements classes for cart, order, payment, etc.
** ATM Transaction
- Diagram models steps of inserting card, entering PIN, selecting transaction, dispensing cash, printing receipt
- Code handles user input, bank API calls, cash dispensing
** Video Streaming
- Diagram shows requesting video, loading, buffering, playback, pausing, resuming
- Code implements video player, network manager, codec classes
** Social Media Post
- Diagram models creating post, adding media, mentioning users, posting publically
- Code handles post creation, notifications, privacy settings
** Ride Sharing
- Diagram shows driver accepting ride, picking up passenger, driving route, dropping off
- Code coordinates locations, payments, driver assignment
** Banking System
- Diagram models account creation, deposits, withdrawals, transfers, interest calculation
- Code implements account, transaction, interest logic
** Audio Transcription
- Diagram shows audio input, preprocessing, speech recognition, text output
- Code handles audio loading, normalization, speech-to-text API calls


* Repository Structure

- ~diagrams/~ - Mermaid system diagrams
- ~code/~ - Python implementations 
- ~tests/~ - Validation examples
- ~tooling/~ - LangChain prompts and scripts
  
* Getting Started

This project uses Poetry for dependency management. To install:

#+begin_src shell
  poetry install
#+end_src

* References 

- https://python.langchain.com/docs/integrations/llms/ollama
- https://python.langchain.com/docs/expression_language/cookbook/code_writing
- https://python.langchain.com/docs/expression_language/cookbook/memory
- https://python.langchain.com/docs/expression_language/cookbook/multiple_chaisn
- https://python.langchain.com/docs/modules/agents/
- https://python.langchain.com/docs/modules/model_io/output_parsers/
- https://python.langchain.com/docs/modules/model_io/models/llms/token_usage_tracking
